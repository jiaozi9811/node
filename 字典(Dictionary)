创建
dict1={'key':'value','key':'value','key':'value','key':'value'}
dict2=dict((['key','value'],['key','value'],['key','value']))

访问
for key in dict1[.keys()]:
  print 'key=%s,value=%s' % (key,dict1[key])
  
删除字典中的元素
  dict.pop('key')
  del dict['key']  
  dict.clear()      清空字典
  dict.keys()       返回所有key
  dict.values()     返回所有值
  dict.items()      [('port', 80), ('name', 'earth')]
  


成员关系操作(in, not in)
dict函数
    clear()           删除所有元素
    copy()            返回字典(浅复制)的一个副本
    fromkeys(seq,val=None)       创建并返回一个新字典,以seq中的元素为键,val做初始值(如果不提供默认为none)   
    get(ket,default=None)         返回字典中键为key的值，如不存在，返回none
    has_key(key)      
    items()           返回一个包含字典中(键, 值)对元组的列表
    iteritems 
    iterkeys
    itervalues
    keys              返回一个包含字典中键的列表
    pop               和方法get()相似，如果字典中key键存在，删除并返回dict[key]，如果key键不存在，且没有给出default的值，引发KeyError 异常
    popitem
    setdefault        和方法set()相似，如果字典中不存在key键，由dict[key]=default为它赋值
    update(dict2)     将字典dict2 的键-值对添加到字典dict
    values            返回一个包含字典中所有值的列表


ex

>>> for eachKey in sorted(dict2):
... print 'dict2 key', eachKey, 'has value',dict2[eachKey]
...
dict2 key name has value earth
dict2 key port has value 80
