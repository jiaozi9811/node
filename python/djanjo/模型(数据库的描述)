模型是使用python代码对数据库中的数据进行描述。是数据的结构。等效于sql中的create table语句

django通过模型在背后执行sql，返回便利的python数据结构，表示数据库表中的行。还通过模型表示sql无法处理的高层级的概念

安装模型
将app加入settings.py的INSTALLED_APPS中
python manage.py check      验证模型
python manage.py makemigrations app_name    生产语句
python manage.py sqlmigrate books 0001      查看sql
python manage.py mirgrate    执行sql


Django2.0中编写models类下的ForeignKey错误及解决
book = models.ForeignKey('BookInfo', on_delete=models.CASCADE)加上on_delete参数就可以


配置数据库

setting.py
DATABASES = {
    'default': 'django.db.backends.sqlite3',
    'NAME': os.path.join(BASE_DIR,'db.sqlite3')，   #数据库的名称
}


__contains      like
icontains       不区分大小写的like
startswith
endswith
range           between


filter()        返回列表
get()           返回一个对象


排序
order_by("object")    排序
order_by("-object")   倒序

filter().order_by()

更新
filter().update(obj='')   
all().update(obj='')

obj.save()          保存
obj.delete()        删除

filter().delete()   
all().delete()


字段可选(blank=True 可为空 null=Ture可为null)
email=model.EmailField(blank=Ture，null=Ture)
默认所有字段都设定不为空blank=False


verbose_name    自定义标注
verbose_name='e-mail'   指定字段为email，中间必须有个@
email=model.EmailField(blank=Ture，null=Ture,verbose_name='e-mail')


ModelAdmin类
定制处理模式的方式。包含特定管理后台实例中特定模型的配置
