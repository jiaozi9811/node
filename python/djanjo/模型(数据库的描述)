模型是使用python代码对数据库中的数据进行描述。是数据的结构。等效于sql中的create table语句

django通过模型在背后执行sql，返回便利的python数据结构，表示数据库表中的行。还通过模型表示sql无法处理的高层级的概念

安装模型
将app加入settings.py的INSTALLED_APPS中
python manage.py check      验证模型
python manage.py makemigrations app_name    生产语句
python manage.py sqlmigrate books 0001      查看sql
python manage.py mirgrate    执行sql


Django2.0中编写models类下的ForeignKey错误及解决
book = models.ForeignKey('BookInfo', on_delete=models.CASCADE)加上on_delete参数就可以


配置数据库

setting.py
DATABASES = {
    'default': 'django.db.backends.sqlite3',
    'NAME': os.path.join(BASE_DIR,'db.sqlite3')，   #数据库的名称
}


INSTALLED_APPS = [
    'django.contrib.admin',           管理后台
    'django.contrib.auth',            身份验证系统
    'django.contrib.contenttypes',    内容类型框架
    'django.contrib.sessions',        会话框架
    'django.contrib.messages',        消息传递框架
    'django.contrib.staticfiles',     一个管理静态文件的框架
]

python manage.py migrate 命令查看INSTALLED_APPS设置并根据settings.py中数据库的设置更改数据库


要将应用程序(app)包含到project中,需要将app添加到settings.py的INSTALLED_APPS中

python manage.py makemigrations app_name


Model
每个模型都是django.db.models.Model的子类
模型的每个属性表示一个数据库字段

创建模型(models.py)
from django.db import models
class Model_name(models.Model):
    vag_name=models.CharField()
使用模型
在settings.py的INSTALLED_APPS中添加app_name
INSTALLED_APPS=[
    #...
    'myapp',
    #...
]

字段选项
null        如果为True,字段允许为null.默认为False
blank       如果为True,字段允许空白.默认为False
choices     一个可迭代的元祖，用于字段的选择 year_in_school_choices=(('FR','Freshman'),('SO','Sophomore'),'JR',"Junior')
default     字段默认值
help_text   用窗体小部件显示额外的‘帮助’文本
primary_key 如果为True,字段为主键
unique      如果为True,字段必须是唯一的

默认，django为每个模型提供一个id字段,是个自动递增的主键。如果已有主键，id则不是主键
id=models.AutoField(primary_key=True)

__contains      like
icontains       不区分大小写的like
startswith
endswith
range           between


filter()        返回列表
get()           返回一个对象


排序
order_by("object")    排序
order_by("-object")   倒序

filter().order_by()

更新
filter().update(obj='')   
all().update(obj='')

obj.save()          保存
obj.delete()        删除

filter().delete()   
all().delete()


字段可选(blank=True 可为空 null=Ture可为null)
email=model.EmailField(blank=Ture，null=Ture)
默认所有字段都设定不为空blank=False


verbose_name    自定义标注
verbose_name='e-mail'   指定字段为email，中间必须有个@
email=model.EmailField(blank=Ture，null=Ture,verbose_name='e-mail')


ModelAdmin类
定制处理模式的方式。包含特定管理后台实例中特定模型的配置
