在django-admin startproject mysite时，django创建并配置了默认的管理后台，只需创建一个管理用户(超级用户),就可登录管理后台
python manage.py createsuperuser

启动开发服务器
python manage.py runserver [ip:port]

管理后台http://ip:port/admin

django.contrib包
django.contrib.auth       用户鉴别系统
django.contrib.sessions   支持匿名会话
django.contrib.comments   用户评注系统

管理后台需要'django.contrib.auth'，'django.contrib.contenttypes'和'django.contrib.sessions'

管理后台由django自带的身份验证框架django.contrib.auth


将模型添加到管理后台
from django.contrib import admin
from .models import Publisher,Auther,Book
admin.site.register(Publisher)
admin.site.register(Author)
admin.site.register(Book)
以上代码告诉django，为这几个模型提供界面


字段可选(blank=True 可为空 null=Ture可为null)
email=model.EmailField(blank=Ture，null=Ture)
默认所有字段都设定不为空blank=False
字段设为空，管理后台就不会把相关的字段粗体显示

verbose_name    自定义标注
verbose_name='e-mail'   指定字段为email，中间必须有个@


from django.contrib import admin
from .models import Publisher, Author, Book

class AuthorAdmin(admin.ModelAdmin):
	list_display = ('first_name', 'last_name', 'email')
	search_fields = ('first_name', 'last_name')

class BookAdmin(admin.ModelAdmin):
	list_display = ('title', 'publisher', 'publication_date')
	list_filter = ('publication_date',)		#按日期查找
	date_hierarchy='publication_date'		#按日期显示
	ordering=('-publication_date',)			#排序
	filter_horizontal=('authors',)			#过滤器 与filter_vertial相似
	raw_id_fields=('publisher',)			#选择器


admin.site.register(Publisher)
admin.site.register(Author, AuthorAdmin)
admin.site.register(Book, BookAdmin)
