内建函数
    open()
    file()

file_object=open(file_name,access_mode='r',buffering=-1)
        access_mode     文件打开的模式 r w a(追加) U(通用换行符支持)||使用r或U打开的文件必须存在||使用w打开的文件若存在则首先清空然后(重新)创建
        buffering       指示访问文件所采用的缓冲方式 0表示不缓冲 1表示只缓冲一行数据 其它大于1的值代表使用给定值作为缓冲区大小. 不提供该参数或者给定负值代表使用系统默认缓冲机制


访问模式
    r 以读方式打开
    rU 或 Ua 以读方式打开, 同时提供通用换行符支持 (PEP 278)
    w 以写方式打开 (必要时清空)
    a 以追加模式打开 (从 EOF 开始, 必要时创建新文件)
    r+ 以读写模式打开
    w+ 以读写模式打开 (参见 w )
    a+ 以读写模式打开 (参见 a )
    rb 以二进制读模式打开
    wb 以二进制写模式打开 (参见 w )
    ab 以二进制追加模式打开 (参见 a )
    rb+ 以二进制读写模式打开 (参见 r+ )
    wb+ 以二进制读写模式打开 (参见 w+ )
    ab+ 以二进制读写模式打开 (参见 a+ )


file()
file()和open()函数具有相同的功能, 可以任意替换.任何使用open()的地方,都可以使用file()替换它

一般说来, 建议使用open()来读写文件, 在您想说明您在处理文件对象时使用file(), 例如 if instance(f, file)

处理方法
    输入
    输出
    文件内移动
    其他


输入
    read()          读取字节到字符串中, 最多读取给定数目个字节. 如果没有给定size参数(默认值为 -1)或者size值为负, 文件将被读取直至末尾
    readline()      读取打开文件的一行(读取下个行结束符之前的所有字节)
    readlines()     读取所有(剩余的)行然后把它们作为一个字符串列表返回
    xreadlines()
    
输出
    write()         把含有文本数据或二进制数据块的字符串写入到文件中
    writelines()    接受一个字符串列表作为参数, 将它们写入文件
    
移动
    seek()          在文件中移动文件指针到不同的位置
    tell()          文件指针在文件中的位置
    
其他
    close()
    fileno()        返回打开文件的描述符
    flush()         把内部缓冲区中的数据立刻写入文件
    isatty()        是一个布尔内建函数, 当文件是一个类 tty 设备时返回 True , 否则返回False
    truncate()      将文件截取到当前文件指针位置或者到给定 size , 以字节为单位

内建
file.close()      方法  关闭文件
file.fileno()       返回文件的描述符(file descriptor ,FD, 整数值)
file.flush()        刷新文件的内部缓冲区
file.isatty()       判断 file 是否是一个类 tty 设备
file.nexta()        返回文件的下一行(类似于file.readline() ), 或在没有其它行时引发 StopIteration 异常
file.read(size=-1)  从文件读取 size 个字节, 当未给定 size 或给定负值的时候, 读取剩余的所有字节, 然后作为字符串返回
file.readintob(buf, size)   从文件读取 size 个字节到 buf 缓冲器(已不支持)
file.readline(size=-1) 从文件中读取并返回一行(包括行结束符), 或返回最大 size个字符
file.readlines(sizhint=0) 读取文件的所有行并作为一个列表返回(包含所有的行结束符); 如果给定 sizhint 且大于 0 , 那么将返回总和大约为sizhint 字节的行(大小由缓冲器容量的下一个值决定）（ 比如说缓冲器的大小只能为4K 的倍数，如果sizhint 为15k，则最后返回的可能是16k———译者按)
file.xreadlinesc()  用于迭代, 可以替换 readlines() 的一个更高效的方法
file.seek(off, whence=0)    在文件中移动文件指针, 从 whence ( 0 代表文件其始, 1 代表当前位置, 2 代表文件末尾)偏移 off 字节
file.tell()         返回当前在文件中的位置
file.truncate(size=file.tell()) 截取文件到最大 size 字节, 默认为当前文件位置
file.write(str)     向文件写入字符串
file.writelines(seq) 向文件写入字符串序列 seq ; seq 应该是一个返回字符串的可迭代对象; 在 2.2 前, 它只是字符串的列表


内建属性
file.closed True    表示文件已经被关闭, 否则为 False
file.encodinga      文件所使用的编码 - 当 Unicode 字符串被写入数据时, 它们将自动使用 file.encoding 转换为字节字符串; 若file.encoding 为 None 时使用系统默认编码
file.mode           文件打开时使用的访问模式
file.name           文件名
file.newlinesa      未读取到行分隔符时为 None , 只有一种行分隔符时为一个字符串, 当文件有多种类型的行结束符时，则为一个包含所有当前所遇到的行结束符的列表
file.softspace      为0 表示在输出一数据后，要加上一个空格符，1 表示不加。这个属性


有助于跨平台开发的os模块属性
    linesep         用于在文件中分隔行的字符串
    sep             用于分隔文件路径名的字符串
    pathsep         用于分隔文件路径的字符串
    curdir          当前工作目录的字符串名称
    pardir          (当前工作目录)父目录字符串名称
    

标准输出    sys.stdin
标准输入    sys.stdout
标准错误    sys.stderr


命令行参数   
    sys.argv        是命令行参数的列表   $#
    len(sys.argv)   是命令行参数的个数   $#
    
    
os模块的文件/目录访问函数

文件处理
        mkfifo()/mknod()        创建命名管道/创建文件系统节点
        remove()/unlink()       Delete file 删除文件
        rename()/renames()      重命名文件
        *statc()                返回文件信息
        symlink()               创建符号链接
        utime()                 更新时间戳
        tmpfile()               创建并打开('w+b')一个新的临时文件
        walk()                  生成一个目录树下的所有文件名

目录/文件夹
        chdir()/fchdir()        改变当前工作目录/通过一个文件描述符改变当前工作目录
        chroot()                改变当前进程的根目录
        listdir()               列出指定目录的文件
        getcwd()/getcwdu()      返回当前工作目录/功能相同, 但返回一个 Unicode 对象
        mkdir()/makedirs()      创建目录/创建多层目录
        rmdir()/removedirs()    删除目录/删除多层目录

访问/权限
        access()                检验权限模式
        chmod()                 改变权限模式
        chown()/lchown()        改变 owner 和 group ID/功能相同, 但不会跟踪链接
        umask()                 设置默认权限模式

文件描述符操作
        open()                  底层的操作系统 open (对于文件, 使用标准的内建 open() 函数)
        read()/write()          根据文件描述符读取/写入数据
        dup()/dup2()            复制文件描述符号/功能相同, 但是是复制到另一个文件描述符

设备号
        makedev()               从 major 和 minor 设备号创建一个原始设备号
        major()/minor()         从原始设备号获得 major/minor 设备号
        
        
os.path模块中的路径名访问函数
        basename()              去掉目录路径, 返回文件名
        dirname()               去掉文件名, 返回目录路径
        join()                  将分离的各部分组合成一个路径名
        split()                 返回 (dirname(), basename()) 元组
        splitdrive()            返回 (drivename, pathname) 元组
        splitext()              返回 (filename, extension) 元组

信息
        getatime()              返回最近访问时间
        getctime()              返回文件创建时间
        getmtime()              返回最近文件修改时间
        getsize()               返回文件大小(以字节为单位)

查询
        exists()                指定路径(文件或目录)是否存在
        isabs()                 指定路径是否为绝对路径
        isdir()                 指定路径是否存在且为一个目录
        isfile()                指定路径是否存在且为一个文件
        islink()                指定路径是否存在且为一个符号链接
        ismount()               指定路径是否存在且为一个挂载点
        samefile()              两个路径名是否指向同个文件
