strings     字符串操作
bytes       byte slice便利操作
strconv     字符串和基本数据类型之间转换
regexp      正则表达式
unicode     unicode码点，UTF-8/16编码


strings
查找字符串
func Contains(s,substr string) bool       // 子串substr在s中，返回true
func ContainsAny(s,char string) bool      // chars中任何一个字符在s中存在，返回true
func ContainsRune(s string,r rune) bool   // Unicode代码点r在s中，返回true

计数
func Count(s, sep string) int     子字符串出现次数

分割字符串
Fields 和 FieldsFunc
func Fields(s string) []string    用空格分隔字符串s，以slice形式返回
func FieldsFunc(s string, f func(rune) bool) []string

Split 和 SplitAfter、 SplitN 和 SplitAfterN
func Split(s, sep string) []string { return genSplit(s, sep, 0, -1) }
func SplitAfter(s, sep string) []string { return genSplit(s, sep, len(sep), -1) }
func SplitN(s, sep string, n int) []string { return genSplit(s, sep, 0, n) }
func SplitAfterN(s, sep string, n int) []string { return genSplit(s, sep, len(sep), n) }
它们都调用了 genSplit 函数
如果sep为空，相当于分成一个个的UTF-8字符
Split(s, sep) 和 SplitN(s, sep, -1) 等价；SplitAfter(s, sep) 和 SplitAfterN(s, sep, -1) 等价
Split 会将 s 中的 sep 去掉，而 SplitAfter 会保留 sep
带 N 的方法可以通过最后一个参数 n 控制返回的结果中的 slice 中的元素个数，当 n < 0 时，返回所有的子字符串；当 n == 0 时，返回的结果是 nil；当 n > 0 时，表示返回的 slice 中最多只有 n 个元素，其中，最后一个元素不会分割


func HasPrefix(s, prefix string) bool     // s 中是否以 prefix 开始
func HasSuffix(s, suffix string) bool {   // s 中是否以 suffix 结尾
    return len(s) >= len(suffix) && s[len(s)-len(suffix):] == suffix
}


字符串出现的位置
func Index(s, sep string) int       // 在s中查找 sep 的第一次出现，返回第一次出现的索引
func IndexAny(s, chars string) int          // chars中任何一个Unicode代码点在s中首次出现的位置
func IndexFunc(s string, f func(rune) bool) int     // 查找字符 c 在 s 中第一次出现的位置，其中 c 满足 f(c) 返回 true
func IndexRune(s string, r rune) int        // Unicode 代码点 r 在 s 中第一次出现的位置

// 有三个对应的查找最后一次出现的位置
func LastIndex(s, sep string) int
func LastIndexAny(s, chars string) int
func LastIndexFunc(s string, f func(rune) bool) int


JOIN 操作
func Join(a []string, sep string) string

重复字符串
func Repeat(s string, count int) string

替换字符串
func Replace(s, old, new string, n int) string  //用new替换s中的old，一共替换n个，如果n< 0，则全部替换
func ReplaceAll(s, old, new string) string

func ToLower(s string) string
func ToUpper(s string) string

去除字符串
func Trim(s string, cutset string) string


-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
bytes 
该包定义了一些操作byte slice的便利操作。因为字符串可以表示为 []byte，因此，bytes 包定义的函数、方法等和 strings 包很类似

func Contains(b, subslice []byte) bool// 子slice subslice 在 b 中，返回 true

func Count(s, sep []byte) int// slice sep 在 s 中出现的次数（无重叠）

-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
unicode
go对unicode的支持包含三个包:

unicode
unicode/utf8
unicode/utf16
unicode包包含基本的字符判断函数。utf8包主要负责rune和byte之间的转换。utf16包负责rune和uint16数组之间的转换

go语言的所有代码都是UTF8的，所以如果我们在程序中的字符串都是utf8编码的，但是我们的单个字符（单引号扩起来的）却是unicode的

func IsControl(r rune) bool  // 是否控制字符
func IsDigit(r rune) bool  // 是否阿拉伯数字字符，即1-9
func IsGraphic(r rune) bool // 是否图形字符
func IsLetter(r rune) bool // 是否字母
func IsLower(r rune) bool // 是否小写字符
func IsMark(r rune) bool // 是否符号字符
func IsNumber(r rune) bool // 是否数字字符，比如罗马数字Ⅷ也是数字字符
func IsOneOf(ranges []*RangeTable, r rune) bool // 是否是RangeTable中的一个
func IsPrint(r rune) bool // 是否可打印字符
func IsPunct(r rune) bool // 是否标点符号
func IsSpace(r rune) bool // 是否空格
func IsSymbol(r rune) bool // 是否符号字符
func IsTitle(r rune) bool // 是否title case
func IsUpper(r rune) bool // 是否大写字符
-------------------------------------------------------------------------------------
unicode/utf8
字节和字符的转换
判断是否符合utf8编码的函数：

func Valid(p []byte) bool
func ValidRune(r rune) bool
func ValidString(s string) bool
判断rune的长度的函数：

func RuneLen(r rune) int
判断字节串或者字符串的rune数

func RuneCount(p []byte) int
func RuneCountInString(s string) (n int)
编码和解码rune到byte

func DecodeRune(p []byte) (r rune, size int)
func EncodeRune(p []byte, r rune) int
-------------------------------------------------------------------------------------
unicode/utf16
将int16和rune进行转换

func Decode(s []uint16) []rune
func Encode(s []rune) []uint16
