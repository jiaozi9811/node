type Mutex
func (m *Mutex) Lock()
func (m *Mutex) Unlock()


type RWMutex
写入锁
func (rw *RWMutex) Lock()
func (rw *RWMutex) Unlock()

读取锁
func (rw *RWMutex) RLock()
func (rw *RWMutex) RUnlock()

写解锁会唤醒所有因欲进行读锁定而被阻塞的goroutine。
读解锁只会在已无任何读锁定的情况下试图唤醒一个因欲进行写锁定而被阻塞的goroutine
若对一个未被写锁定的读写锁进行写解锁，会引发一个不可恢复的运行时恐慌，而对一个未被读锁定的读写锁进行读解锁同样会引起恐慌



sync.Once 执行一次
type Once struct {    // 包含隐藏或非导出字段 }

func (o *Once) Do(f func())
sync.Once类型的典型应用场景是执行仅需执行一次的任务
有些任务不适合在init函数中执行，此时sync.Once就派上用场了


sync.WaitGroup
type WaitGroup struct {    // 包含隐藏或非导出字段 }

func (wg *WaitGroup) Add(delta int)
func (wg *WaitGroup) Done()   //减少计数器的值
func (wg *WaitGroup) Wait()   //计数器为0，此方法才会执行

Add方法向内部计数器加delta，delta可为负数
如内部计数器为0，Wait方法将阻塞的所有线程释放。
Wait方法会检查计数器，如果计算为0，改方法返回，对后续程序的运行无影响；如计数器大于0，改方法所在的goroutine就会阻塞
如计数器小于0，报panic
Add方法需在Wait之前
sync.Add(-1)与sync.Done()相同



sync.Pool(临时对象池)
type Pool struct {    New func() interface{}    }

func (p *Pool) Get() interface{}
func (p *Pool) Put(x interface{})



synx.Coud











