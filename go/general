#helloworld.go###############################
package main
import "fmt"
func main() {
	fmt.Println("hello,world!")
}

or

package main 
import (
	"fmt"
	"os"
	"strings"
)
func main() {
	who:="World!"
	if len(os.Args)>1{
		who = strings.Join(os.Args[1:]," ")
	}
	fmt.Println("Hello",who)
}
###########################################################################################
###########################################################################################
导入
import
标准库包在go的安装位置
第三方包在GOPATH知道的目录

远程导入
go支持从网站获取源代码
import "github.com/spf1/vipr"
如果导入路径包含URL，可以使用go工具链从DVCS(分布式版本控制系统)中获取，并把包的源码保存在GOPATH中，通过go get获取


命名导入
在import导入的包左侧定义一个名字
import (
	"fmt"
	myfmt "mylib/fmt"
)

下划线 _    需要一个包但又不需要引用包的标识符


init函数
init函数在main之前执行，用于设置包，初始化变量或其他在程序运行前完成的引导工作




fmt包	包括接收输入，格式化输出的各种函数
	Println
	gofmt	将代码格式化为标准格式
	goimports	自动添加需要用import声明及需要移除的import声明
	Printf	格式化输出
		%d	int变量
		%x,%o,%b 	16进制，8进制，2进制形式的int
		$f,%g,%e	浮点数
		%t 	布尔数
		%c	rune，go中特有的unicode字符类型
		%s 	string
		%q	带双引号的字符串或带单引号的rune 'c'
		%v 	将任意变量以易读的形式打印
		%%	字符型百分比标识(%符号本身)


os包		提供与系统交换相关的一些函数及变量
	Args	获取运行时程序的命令行参数
		os.Args(0)	命令行执行的命令本身
		os.Args[1:len(os.Args)]	除了命令本身外的所有参数
		os.Args[1:]	同上

#同linux的#?  ##################################
package main

import (
	"fmt"
	"os"
)

func main() {
	var s,sep string
	for i := 1; i < len(os.Args); i++ {
		s +=sep + os.Args[i]
		sep=" "		
		}	
	fmt.Println(s)
}

与上同
fmt.Println(strings.Join(os.Args[1:]," "))

_(下划线)	空白标识符,可以在任何接收值但不需要处理时使用


以下写法等价
s := ""				只能用在函数内部,package级别的变量禁止使用
var s string		用作初始化
var s = ""			较少使用,除非同时声明多个变量
var s string = ""	


bufio	用于处理程序的输出和输入
	Scanner	可以简单的接收输入,或把输入打散成行或单词

	
var		声明变量
const		声明常量
type 		类型
func 		声明函数

var
	var 变量名称 类型 = 表达式   其中(类型 = 表达式)可以省略其中一个


简短变量声明
	名字 := 表达式
	
	
因为简短变量声明的简洁和灵活性,被广泛用于大部分的局部变量的声明和初始化中。
var形式的声明语句往往用于需要显式指定变量类型的地方，或因为变量稍后会被重新赋值而初始化无关紧要的地方


简短变量声明语句中必须至少声明一个新的变量，否则将失效
:=	是一个变量声明语句
=	是一个变量赋值语句




指针
	一个指针的值是另一个变量的地址，指针对应的是变量在内存中的存储位置。
	通过指针，可以直接读写对应变量的值，而无需知道此变量的名字
	任何类型指针的零值都是nil,如果p !=nil测试为真,那p是指向某个有效变量
	指针之间可以进行相等测试,当它们指向同一个变量或全部为nil是才相等

	x := 1		
	p := &x			//p, of type *int,points to x
	fmt.Println(*p)	//"1"
	*p = 2			//equivalent to x = 2
	fmt.Println(x)	//"2"

new函数
	将创建一个T类型的匿名变量，初始化为T类型的零值，然后返回变量地址，返回的指针类型为*T

p:=new(int)		//p,*int类型,指向匿名的int变量
fmt.Print(*p)	//"0"
*p=2			//设置int匿名变量为2
fmt.Println(*p)	//"2"


func newInt() *int {
	return new(int)
}
与上同
func newInt() *int {
	var dummy int
	return &dummy
}


flag	提供用来解析命令行参数的包,使得开发命令行工具更为简单
	.Usage
	.Type(参数名,默认值,使用提示)
	.Type(指针,参数名,默认值,使用提示)
	.Args		返回命令行的参数
	.Parse		执行解析
	
