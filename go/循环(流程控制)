switch语句可以用于类型判断
if和switch都可以包含一条初始化子句
break和continue可以后跟一条标签(label）语句
defer可以方便地执行异常捕获和资源回收任务
select可用于分支选择，但只与通道配合使用
go语句用于异步启用goroutine并执行指定的函数



代码块
是一个由花括号包裹的表达式和语句的序列，代码块中也可以不包含任何内容，即空代码块



if request {...
} else if request {...
} else {...}

习惯用法
value, err := pack1.Function1(param1)
if err != nil {
	fmt.Printf("An error occured in pack1.Function1 with parameter %v", param1)
	return err
}
// 未发生错误，继续执行：
由于本例的函数调用者属于 main 函数，所以程序会直接停止运行。

如果我们想要在错误发生的同时终止程序的运行，我们可以使用 os 包的 Exit 函数：
习惯用法

if err != nil {
	fmt.Printf("Program stopping with error %v", err)
	os.Exit(1)
}

-----------------------------------------------------
package main
import ( "math";"fmt" )
func mySqrt(f float64) (v float64, ok bool) {
	if f < 0 { return } // error case
	return math.Sqrt(f),true
}
func main() {
	t, ok := mySqrt(25.0)
	if ok { fmt.Println(t) }
}



switch 

switch var1 {
	case val1:
		...
	case val2:
		...
	default:
		...
}

花括号{必须和switch关键字在同一行
可以同时测试多个可能符合条件的值，使用逗号分割它们，例如：case val1, val2, val3
如果在执行完每个分支的代码后，还希望继续执行后续分支的代码，可以使用 fallthrough 关键字来达到目的
可选的default分支可以出现在任何顺序，但最好将它放在最后。它的作用类似与if-else 语句中的 else，表示不符合任何已给出条件时，执行相关语句

switch语句的第二种形式是不提供任何被判断的值（实际上默认为判断是否为 true），然后在每个 case 分支中进行测试不同的条件
switch {
	case condition1:
		...
	case condition2:
		...
	default:
		...
}


switch 语句的第三种形式是包含一个初始化语句
switch initialization {
	case val1:
		...
	case val2:
		...
	default:
		...
}
switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码
如果case带有fallthrough，程序会继续执行下一条case,不会再判断下一条case
fallthrough不能用在switch的最后一个分支




for 

for 初始化语句; 条件语句; 修饰语句 {}
for i, j := 0, N; i < j; i, j = i+1, j-1 {}

range
for range s {  ...  }  // 忽略全部返回值，仅迭代。



goto

break

continue
